#!/bin/sh
# start DOMAIN with VM-name, or
# create a VM/DOMAIN with VM-dir, or
# extract and create a VM with VM-arch.
# VM-arch can be: RAR,ZIP,TAR,OVA,TGZ
# 20200629,ha: added --clock option..
# 20200813,ha: run RUNME if found in VM-dir
# 20201126,ha: if no disk found, create one
# 20201205,ha: add XML export of VM config
# USAGE: virt-run [VM-name|VM-dir|VM-arch]
   touch /tmp/ISO
# extract archive but do NOT overwrite
if [ ! "$1" ];then
   echo VM-Archiv-File OR VM-name required 
   virsh list --all
   exit
fi
VMN=`basename $1|cut -f1 -d.`; VMD=`dirname $1`
#echo "<$VMN><$VMD>";exit
if [ "`virsh list --all|grep $VMN`" ];then
   /usr/bin/virsh start $VMN         # domain must be known to virsh
   [ $VMD != . ] && /usr/bin/virsh dumpxml $VMN >$VMD/$VMN/$VMN.xml
   /usr/bin/virt-viewer -w $VMN      # -w to wait until domain is running. 

else
   if [ ! -d  $VMD/$VMN ];then
      if [ "`file $1|grep RAR\ archive`" ];then
         echo extracting RAR...
         unrar x -o- $1 $VMD
      elif [ "`file $1|grep Zip\ archive`" ];then
         echo extracting ZIP...
         mkdir -p $VMD/$VMN && unzip -xn $1 -d $VMD/$VMN
      elif [ "`file $1|grep tar\ archive`" ];then
         echo extracting TAR/OVA...
	 mkdir -p $VMD/$VMN && tar xvf $1 --one-top-level=$VMD/$VMN
      elif [ "`file $1|grep gzip\ compressed`" ];then
         echo extracting TGZ/TAR.GZ...
	 tar zxvf $1 --one-top-level=$VMD
      fi
   fi
# check if RUNME script exist
   [ -x $VMD/$VMN/RUNME ] && $VMD/$VMN/RUNME && exec $0 $VMN
# check if DISK-file already used in a domain
   VDK=`find $VMD/$VMN \( -name *.vmdk -o -name *.qcow \) 2>/dev/null|tail -1`
#   [ ! "$VDK" ] && echo "NO virtual Machine with name <$VMN>" && exit
   [ ! "$VDK" ] && VDK=$VMD/$VMN/$VMN.vmdk && qemu-img create -f vmdk $VDK 4G
   for DOM in `virsh list --all|awk 'FNR>2{print $2}'`;do
      for HDD in `virsh domblklist $DOM|awk 'FNR>2{print $2}'`;do
         [ "$HDD" = "$VDK" ] && echo Domain $DOM has DISK: $HDD && exit
      done
   done
# check values from VMX file
   VMX=`find $VMD/$VMN -name *.vmx 2>/dev/null|tail -1`
   if [ "$VMX" ];then
      VCPU=`grep -v '^#' $VMX|tr -d '\015 "'|awk -F= '/^numvcpus/{print $2}'`
      VMEM=`grep -v '^#' $VMX|tr -d '\015 "'|awk -F= '/^memsize/{print $2}'`
      BOOT=`grep -v '^#' $VMX|tr -d '\015 "'|awk -F= '/^firmware/{print $2}'`
      [ "`echo $BOOT|grep efi`" ] && BOOT=uefi
   fi
# create domain with 1vCPU and 1GBvMEM and DISK-file
# https://linuxconfig.org/how-to-create-and-manage-kvm-virtual-machines-from-cli
   if [ -f $VMD/$VMN.xml ];then
      virsh define $VMD/$VMN.xml
   else
      virt-install --name=$VMN --boot=${BOOT:=cdrom,hd} --vcpus=${VCPU:=1} --memory=${VMEM:=2048} --disk path=$VDK --cdrom /tmp/ISO --import --noreboot --noautoconsole --clock offset=localtime,hpet_present=yes
   fi
   $0 $VMN
fi
